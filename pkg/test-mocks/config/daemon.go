// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/replicatedcom/ship/pkg/lifecycle/render/config (interfaces: Daemon)

// Package config is a generated GoMock package.
package config

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/replicatedcom/ship/pkg/api"
	config "github.com/replicatedcom/ship/pkg/lifecycle/render/config"
)

// MockDaemon is a mock of Daemon interface
type MockDaemon struct {
	ctrl     *gomock.Controller
	recorder *MockDaemonMockRecorder
}

// MockDaemonMockRecorder is the mock recorder for MockDaemon
type MockDaemonMockRecorder struct {
	mock *MockDaemon
}

// NewMockDaemon creates a new mock instance
func NewMockDaemon(ctrl *gomock.Controller) *MockDaemon {
	mock := &MockDaemon{ctrl: ctrl}
	mock.recorder = &MockDaemonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDaemon) EXPECT() *MockDaemonMockRecorder {
	return m.recorder
}

// AllStepsDone mocks base method
func (m *MockDaemon) AllStepsDone(arg0 context.Context) {
	m.ctrl.Call(m, "AllStepsDone", arg0)
}

// AllStepsDone indicates an expected call of AllStepsDone
func (mr *MockDaemonMockRecorder) AllStepsDone(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllStepsDone", reflect.TypeOf((*MockDaemon)(nil).AllStepsDone), arg0)
}

// ClearProgress mocks base method
func (m *MockDaemon) ClearProgress() {
	m.ctrl.Call(m, "ClearProgress")
}

// ClearProgress indicates an expected call of ClearProgress
func (mr *MockDaemonMockRecorder) ClearProgress() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearProgress", reflect.TypeOf((*MockDaemon)(nil).ClearProgress))
}

// ConfigSavedChan mocks base method
func (m *MockDaemon) ConfigSavedChan() chan interface{} {
	ret := m.ctrl.Call(m, "ConfigSavedChan")
	ret0, _ := ret[0].(chan interface{})
	return ret0
}

// ConfigSavedChan indicates an expected call of ConfigSavedChan
func (mr *MockDaemonMockRecorder) ConfigSavedChan() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigSavedChan", reflect.TypeOf((*MockDaemon)(nil).ConfigSavedChan))
}

// EnsureStarted mocks base method
func (m *MockDaemon) EnsureStarted(arg0 context.Context, arg1 *api.Release) chan error {
	ret := m.ctrl.Call(m, "EnsureStarted", arg0, arg1)
	ret0, _ := ret[0].(chan error)
	return ret0
}

// EnsureStarted indicates an expected call of EnsureStarted
func (mr *MockDaemonMockRecorder) EnsureStarted(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureStarted", reflect.TypeOf((*MockDaemon)(nil).EnsureStarted), arg0, arg1)
}

// GetCurrentConfig mocks base method
func (m *MockDaemon) GetCurrentConfig() map[string]interface{} {
	ret := m.ctrl.Call(m, "GetCurrentConfig")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetCurrentConfig indicates an expected call of GetCurrentConfig
func (mr *MockDaemonMockRecorder) GetCurrentConfig() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentConfig", reflect.TypeOf((*MockDaemon)(nil).GetCurrentConfig))
}

// MessageConfirmedChan mocks base method
func (m *MockDaemon) MessageConfirmedChan() chan string {
	ret := m.ctrl.Call(m, "MessageConfirmedChan")
	ret0, _ := ret[0].(chan string)
	return ret0
}

// MessageConfirmedChan indicates an expected call of MessageConfirmedChan
func (mr *MockDaemonMockRecorder) MessageConfirmedChan() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageConfirmedChan", reflect.TypeOf((*MockDaemon)(nil).MessageConfirmedChan))
}

// PushStep mocks base method
func (m *MockDaemon) PushStep(arg0 context.Context, arg1 string, arg2 api.Step) {
	m.ctrl.Call(m, "PushStep", arg0, arg1, arg2)
}

// PushStep indicates an expected call of PushStep
func (mr *MockDaemonMockRecorder) PushStep(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushStep", reflect.TypeOf((*MockDaemon)(nil).PushStep), arg0, arg1, arg2)
}

// SetProgress mocks base method
func (m *MockDaemon) SetProgress(arg0 config.Progress) {
	m.ctrl.Call(m, "SetProgress", arg0)
}

// SetProgress indicates an expected call of SetProgress
func (mr *MockDaemonMockRecorder) SetProgress(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProgress", reflect.TypeOf((*MockDaemon)(nil).SetProgress), arg0)
}

// SetStepName mocks base method
func (m *MockDaemon) SetStepName(arg0 context.Context, arg1 string) {
	m.ctrl.Call(m, "SetStepName", arg0, arg1)
}

// SetStepName indicates an expected call of SetStepName
func (mr *MockDaemonMockRecorder) SetStepName(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStepName", reflect.TypeOf((*MockDaemon)(nil).SetStepName), arg0, arg1)
}
